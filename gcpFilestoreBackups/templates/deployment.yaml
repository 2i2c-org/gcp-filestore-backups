apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "gcpFilestoreBackups.fullname" . | lower }}
  labels:
    app: gcp-filestore-backups
    {{- include "gcpFilestoreBackups.labels" . | nindent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: gcp-filestore-backups
      {{- include "gcpFilestoreBackups.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: gcp-filestore-backups
        {{- include "gcpFilestoreBackups.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "gcpFilestoreBackups.serviceAccountName" . }}
      automountServiceAccountToken: False
      containers:
        - name: {{ .Chart.Name | lower }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command:
            - python
            - gcp-filestore-backups.py
          args:
            {{- range .Values.filestoreNames | required "filestoreNames is required" }}
            - '{{ . }}'
            {{- end }}
            - '{{ .Values.project | required "project is required" }}'
            - '{{ .Values.zone | required "zone is required" }}'
          securityContext:
            runAsUser: 1000
            allowPrivilegeEscalation: False
            # The image used for gcpFilestoreBackups uses gcloud, which wants to
            # write a log file. Without setting readOnlyRootFilesystem = False,
            # gcloud will not have permissions to write it's log file and will
            # fail and crash the pod.
            readOnlyRootFilesystem: False
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
